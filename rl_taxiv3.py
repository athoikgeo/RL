# -*- coding: utf-8 -*-
"""taxiv3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S0M_DS57TeUY28b199cxY8igjPic_b06
"""

!pip install gym

!apt-get install python-opengl -y

!apt install xvfb -y

!pip install pyvirtualdisplay
!pip install piglet

from pyvirtualdisplay import Display
display = Display(visible=0, size=(1400, 900))
display.start()

# Commented out IPython magic to ensure Python compatibility.
import os
if type(os.environ.get("DISPLAY")) is not str or len(os.environ.get("DISPLAY"))==0:
    !bash ../xvfb start
#     %env DISPLAY=:1
        
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
# %load_ext autoreload
# %autoreload 2

from collections import defaultdict
import random, math
import numpy as np

class QLearningAgent:
    def __init__(self, alpha, epsilon, discount, get_legal_actions):

    def get_qvalue(self, state, action):
        """ Returns Q(state,action) """
        return self._qvalues[state][action]

    def set_qvalue(self,state,action,value):
        """ Sets the Qvalue for [state,action] to the given value """
        self._qvalues[state][action] = value


    def get_value(self, state):
      
        possible_actions = self.get_legal_actions(state)

        #If there are no legal actions, return 0.0
        if len(possible_actions) == 0:
            return 0.0

        q = [self.get_qvalue(state,a) for a in possible_actions]
        value = max(q)

        return value

    def update(self, state, action, reward, next_state):
       

        #agent parameters
        gamma = self.discount
        learning_rate = self.alpha

        Q = (1-learning_rate) * self.get_qvalue(state,action) + learning_rate * (reward + gamma * self.get_value(next_state))
        
        self.set_qvalue(state, action, Q)

    
    def get_best_action(self, state):
      
        possible_actions = self.get_legal_actions(state)

        #If there are no legal actions, return None
        if len(possible_actions) == 0:
            return None

        q = [self.get_qvalue(state,a) for a in possible_actions]
        maxQ = max(q)
        i = q.index(maxQ)
        best_action = possible_actions[i]

        return best_action

    def get_action(self, state):
     

        # Pick Action
        possible_actions = self.get_legal_actions(state)
        action = None

        #If there are no legal actions, return None
        if len(possible_actions) == 0:
            return None

        #agent parameters:
        epsilon = self.epsilon

        if random.random() < epsilon:
            action = random.choice(possible_actions)
        else:
            action = self.get_best_action(state)
        chosen_action = action
            
        return chosen_action

import gym
env = gym.make("Taxi-v3")

n_actions = env.action_space.n

agent = QLearningAgent(alpha=0.7, epsilon=0.2, discount=0.2,
                       get_legal_actions = lambda s: range(n_actions))

def play_and_train(env,agent,t_max=10**4):
   
    total_reward = 0.0
    s = env.reset()
    
    for t in range(t_max):
        # get agent to pick action given state s.
        a = agent.get_action(s)
        
        next_s, r, done, _ = env.step(a)
        
        # train (update) agent for state s
        agent.update(s,a,r,next_s)
        
        s = next_s
        total_reward +=r
        if done: break
        
    return total_reward

from IPython.display import clear_output

rewards = []
for i in range(1000):
    rewards.append(play_and_train(env, agent))
    agent.epsilon *= 0.99
    
    if i %100 ==0:
        clear_output(True)
        print('eps =', agent.epsilon, 'mean reward =', np.mean(rewards[-10:]))
        plt.plot(rewards)
        plt.show()

env.reset() # reset environment to a new, random state
env.render()

print("Action Space {}".format(env.action_space))
print("State Space {}".format(env.observation_space))

state = env.encode(3, 1, 2, 0) # (taxi row, taxi column, passenger index, destination index)
print("State:", state)

env.s = state
env.render()

env.P[328]

import numpy as np
q_table = np.zeros([env.observation_space.n, env.action_space.n])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# """Training the agent"""
# 
# import random
# from IPython.display import clear_output
# 
# # Hyperparameters
# alpha = 1
# gamma = 0.8
# epsilon = 0.2
# 
# # For plotting metrics
# all_epochs = []
# all_penalties = []
# 
# for i in range(1, 100001):
#     state = env.reset()
# 
#     epochs, penalties, reward, = 0, 0, 0
#     done = False
#     
#     while not done:
#         if random.uniform(0, 1) < epsilon:
#             action = env.action_space.sample() # Explore action space
#         else:
#             action = np.argmax(q_table[state]) # Exploit learned values
# 
#         next_state, reward, done, info = env.step(action) 
#         
#         old_value = q_table[state, action]
#         next_max = np.max(q_table[next_state])
#         
#         new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)
#         q_table[state, action] = new_value
# 
#         if reward == -10:
#             penalties += 1
# 
#         state = next_state
#         epochs += 1
#         
#     if i % 100 == 0:
#         clear_output(wait=True)
#         print(f"Episode: {i}")
# 
# print("Training finished.\n")

"""Evaluate agent's performance after Q-learning"""

total_epochs, total_penalties = 0, 0
episodes = 100

for _ in range(episodes):
    state = env.reset()
    epochs, penalties, reward = 0, 0, 0
    
    done = False
    
    while not done:
        action = np.argmax(q_table[state])
        state, reward, done, info = env.step(action)

        if reward == -10:
            penalties += 1

        epochs += 1

    total_penalties += penalties
    total_epochs += epochs

print(f"Results after {episodes} episodes:")
print(f"Average timesteps per episode: {total_epochs / episodes}")
print(f"Average penalties per episode: {total_penalties / episodes}")

from IPython.display import clear_output

rewards = []
for i in range(10000):
    rewards.append(play_and_train(env, agent))
    agent.epsilon *= 0.99
  
    if i %100 ==0:
        clear_output(True)
        print('eps =', agent.epsilon, 'mean reward =', np.mean(rewards[-10:]))
        plt.plot(rewards)
        plt.show()

from IPython.display import clear_output

rewards = []
meanrewards = []
for i in range(10000):
    rewards.append(play_and_train(env, agent))
    agent.epsilon *= 0.99
        
    if i %100 ==0:
        clear_output(True)
        print('eps =', agent.epsilon, 'mean reward =', np.mean(rewards[-100:]))
        meanrewards.append(np.mean(rewards[-100:]))
        plt.plot(meanrewards)

        plt.show()

"""deep q learning"""

!pip install keras-rl2

import numpy as np
import gym
import random
import tensorflow.keras
print("Number of actions: %d" % env.action_space.n)
print("Number of states: %d" % env.observation_space.n)
action_size = env.action_space.n
state_size = env.observation_space.n
np.random.seed(123)
env.seed(123)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Flatten, Embedding, Reshape
from tensorflow.keras.optimizers import Adam
from tensorflow.python.keras.optimizers import Adam
Adam._name = 'hey'
from tensorflow.keras.layers import Embedding
import tensorflow
layers = tensorflow.keras.layers
BatchNormalization = tensorflow.keras.layers.BatchNormalization
Conv2D = tensorflow.keras.layers.Conv2D
Flatten = tensorflow.keras.layers.Flatten
TensorBoard = tensorflow.keras.callbacks.TensorBoard
ModelCheckpoint = tensorflow.keras.callbacks.ModelCheckpoint
env.reset()
env.step(env.action_space.sample())[0]

model_only_embedding = tensorflow.keras.Sequential()
model_only_embedding.add(Embedding(500, 6, input_length=1))
model_only_embedding.add(Reshape((6,)))
print(model_only_embedding.summary())


model = tensorflow.keras.Sequential()
model.add(Embedding(500, 10, input_length=1))
model.add(Reshape((10,)))
model.add(Dense(50, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(action_size, activation='linear'))
print(model.summary())

from rl.agents.dqn import DQNAgent
from rl.policy import EpsGreedyQPolicy
from rl.memory import SequentialMemory

memory =SequentialMemory(limit=50000, window_length=1)
policy = EpsGreedyQPolicy()
dqn_only_embedding = DQNAgent(model=model, nb_actions=action_size, memory=memory, nb_steps_warmup=500, target_model_update=1e-2, policy=policy)
dqn_only_embedding.compile(Adam(lr=1e-3), metrics=['mae'])
dqn_only_embedding.fit(env, nb_steps=100000, visualize=False, verbose=1, nb_max_episode_steps=99, log_interval=10000)

dqn_only_embedding.test(env, nb_episodes=5000, visualize=True, nb_max_episode_steps=99)